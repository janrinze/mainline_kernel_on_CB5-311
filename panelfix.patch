diff --git a/drivers/gpu/drm/display/drm_dp_helper.c b/drivers/gpu/drm/display/drm_dp_helper.c
index 6ee51003d..37bfaa601 100644
--- a/drivers/gpu/drm/display/drm_dp_helper.c
+++ b/drivers/gpu/drm/display/drm_dp_helper.c
@@ -537,10 +537,10 @@ static int drm_dp_dpcd_access(struct drm_dp_aux *aux, u8 request,
 	 * If the device attached to the aux bus is powered down then there's
 	 * no reason to attempt a transfer. Error out immediately.
 	 */
-	if (aux->powered_down) {
-		ret = -EBUSY;
-		goto unlock;
-	}
+	// if (aux->powered_down) {
+	//	ret = -EBUSY;
+	//	goto unlock;
+	// }
 
 	/*
 	 * The specification doesn't give any recommendation on how often to
@@ -608,7 +608,7 @@ int drm_dp_dpcd_probe(struct drm_dp_aux *aux, unsigned int offset)
 	return ret < 0 ? ret : 0;
 }
 EXPORT_SYMBOL(drm_dp_dpcd_probe);
-
+#ifdef __JRP_DP_WORKAROUND__
 /**
  * drm_dp_dpcd_set_powered() - Set whether the DP device is powered
  * @aux: DisplayPort AUX channel; for convenience it's OK to pass NULL here
@@ -631,7 +631,7 @@ void drm_dp_dpcd_set_powered(struct drm_dp_aux *aux, bool powered)
 	mutex_unlock(&aux->hw_mutex);
 }
 EXPORT_SYMBOL(drm_dp_dpcd_set_powered);
-
+#endif
 /**
  * drm_dp_dpcd_read() - read a series of bytes from the DPCD
  * @aux: DisplayPort AUX channel (SST or MST)
@@ -1891,8 +1891,8 @@ static int drm_dp_i2c_xfer(struct i2c_adapter *adapter, struct i2c_msg *msgs,
 	struct drm_dp_aux_msg msg;
 	int err = 0;
 
-	if (aux->powered_down)
-		return -EBUSY;
+	//if (aux->powered_down)
+	//	return -EBUSY;
 
 	dp_aux_i2c_transfer_size = clamp(dp_aux_i2c_transfer_size, 1, DP_AUX_MAX_PAYLOAD_BYTES);
 
diff --git a/drivers/gpu/drm/nouveau/nouveau_dp.c b/drivers/gpu/drm/nouveau/nouveau_dp.c
index bcda01051..cc80667da 100644
--- a/drivers/gpu/drm/nouveau/nouveau_dp.c
+++ b/drivers/gpu/drm/nouveau/nouveau_dp.c
@@ -236,7 +236,7 @@ nouveau_dp_detect(struct nouveau_connector *nv_connector,
 	}
 
 	// Ensure that the aux bus is enabled for probing
-	drm_dp_dpcd_set_powered(&nv_connector->aux, true);
+	// drm_dp_dpcd_set_powered(&nv_connector->aux, true);
 
 	mutex_lock(&nv_encoder->dp.hpd_irq_lock);
 	if (mstm) {
@@ -303,8 +303,8 @@ nouveau_dp_detect(struct nouveau_connector *nv_connector,
 	 * and since we don't really have a usecase for that anyway - just disable the aux bus here
 	 * if we've decided the connector is disconnected
 	 */
-	if (ret == NOUVEAU_DP_NONE)
-		drm_dp_dpcd_set_powered(&nv_connector->aux, false);
+	//if (ret == NOUVEAU_DP_NONE)
+	//	drm_dp_dpcd_set_powered(&nv_connector->aux, false);
 
 	mutex_unlock(&nv_encoder->dp.hpd_irq_lock);
 	return ret;
diff --git a/drivers/gpu/drm/panel/panel-edp.c b/drivers/gpu/drm/panel/panel-edp.c
index 767e47a2b..4effed606 100644
--- a/drivers/gpu/drm/panel/panel-edp.c
+++ b/drivers/gpu/drm/panel/panel-edp.c
@@ -401,8 +401,9 @@ static int panel_edp_disable(struct drm_panel *panel)
 static int panel_edp_suspend(struct device *dev)
 {
 	struct panel_edp *p = dev_get_drvdata(dev);
-
+#ifdef __JRP_DP_WORKAROUND__
 	drm_dp_dpcd_set_powered(p->aux, false);
+#endif
 	gpiod_set_value_cansleep(p->enable_gpio, 0);
 	regulator_disable(p->supply);
 	p->unprepared_time = ktime_get_boottime();
@@ -453,8 +454,9 @@ static int panel_edp_prepare_once(struct panel_edp *p)
 	}
 
 	gpiod_set_value_cansleep(p->enable_gpio, 1);
+#ifdef __JRP_DP_WORKAROUND__
 	drm_dp_dpcd_set_powered(p->aux, true);
-
+#endif
 	p->powered_on_time = ktime_get_boottime();
 
 	delay = p->desc->delay.hpd_reliable;
@@ -492,7 +494,9 @@ static int panel_edp_prepare_once(struct panel_edp *p)
 	return 0;
 
 error:
+#ifdef __JRP_DP_WORKAROUND__
 	drm_dp_dpcd_set_powered(p->aux, false);
+#endif
 	gpiod_set_value_cansleep(p->enable_gpio, 0);
 	regulator_disable(p->supply);
 	p->unprepared_time = ktime_get_boottime();
diff --git a/drivers/spi/spi-tegra114.c b/drivers/spi/spi-tegra114.c
index bc7cc4088..0b4ec95ca 100644
--- a/drivers/spi/spi-tegra114.c
+++ b/drivers/spi/spi-tegra114.c
@@ -727,7 +727,7 @@ static int tegra_spi_set_hw_cs_timing(struct spi_device *spi)
 	u32 spi_cs_timing;
 	u32 inactive_cycles;
 	u8 cs_state;
-
+#ifdef __JRP_WORKAROUND_DISABLE__
 	if (setup->unit != SPI_DELAY_UNIT_SCK ||
 	    hold->unit != SPI_DELAY_UNIT_SCK ||
 	    inactive->unit != SPI_DELAY_UNIT_SCK) {
@@ -736,7 +736,7 @@ static int tegra_spi_set_hw_cs_timing(struct spi_device *spi)
 			SPI_DELAY_UNIT_SCK);
 		return -EINVAL;
 	}
-
+#endif
 	setup_dly = min_t(u8, setup->value, MAX_SETUP_HOLD_CYCLES);
 	hold_dly = min_t(u8, hold->value, MAX_SETUP_HOLD_CYCLES);
 	if (setup_dly && hold_dly) {
diff --git a/include/drm/display/drm_dp_helper.h b/include/drm/display/drm_dp_helper.h
index 279624833..59a30c948 100644
--- a/include/drm/display/drm_dp_helper.h
+++ b/include/drm/display/drm_dp_helper.h
@@ -517,11 +517,11 @@ struct drm_dp_aux {
 	/**
 	 * @powered_down: If true then the remote endpoint is powered down.
 	 */
-	bool powered_down;
+	// bool powered_down;
 };
 
 int drm_dp_dpcd_probe(struct drm_dp_aux *aux, unsigned int offset);
-void drm_dp_dpcd_set_powered(struct drm_dp_aux *aux, bool powered);
+//void drm_dp_dpcd_set_powered(struct drm_dp_aux *aux, bool powered);
 ssize_t drm_dp_dpcd_read(struct drm_dp_aux *aux, unsigned int offset,
 			 void *buffer, size_t size);
 ssize_t drm_dp_dpcd_write(struct drm_dp_aux *aux, unsigned int offset,
